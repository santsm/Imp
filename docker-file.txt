---- Creating Docker file ----

* Name of the docker file should be always "Dockerfile" itself
* first line of docker file always start with "FROM"

FROM - is used to define the base image , on which will be building.
ADD - is used to add files to the conatiner being built
Run - used to add layers to the base image ,by adding installing components
CMD - used to run on the start of the container
Entrypoint - used strictly to run commands the moment the conatiner initializes. Diff b/w CMD and Entrypoint -- Entrypoint will run irrespective of the fact whether argument is specified or not.
ENV - used to define environment variables in the container run time.

--- example ------------------------------------------

FROM ubuntu
RUN apt-get update
RUN apt-get -y install apache2
ADD <source path> <destination path > filename
CMD service apache2 status
Entrypoint service apache2 status 
ENV name Devops Docker system
--------------------------------------------------------------------------------------------

FROM ubuntu
 MAINTAINER yourname
 RUN apt-get -y update
 RUN apt-get install -y python-yaml python-jinja2 git
 RUN git clone http://github.com/ansible/ansible.git /tmp/ansible
 WORKDIR /tmp/ansible
 ENV PATH /tmp/ansible/bin:/sbin:/usr/sbin:/usr/bin
 ENV ANSIBLE_LIBRARY /tmp/ansible/library
 ENV PYTHONPATH /tmp/ansible/lib:$PYTHON_PATH
 RUN git clone http://github.com/yourusername/yourrepo.git /tmp/example
 ADD inventory /etc/ansible/hosts
 WORKDIR /tmp/examples
 RUN ansible-playbook site.yml -c local
 EXPOSE 22 3000
 ENTRYPOINT [“/usr/bin/foo”]
 
 ----------------------------------------------------------------------------------------------

to build a docker image by running docker file

sudo docker build . -t new_dockerfile // (.- current directory and new_dockerfile - name of the new docker image being built)

************************************************************************************************************************************************
------------Docker Mount -- Mapping files/directory to the container--------------
************************************************************************************************************************************************

docker run -t -v <path of the directory>:<mount point inside conatiner path>


************************************************************************************************************************************************
------------Docker Volume ----------
************************************************************************************************************************************************

docker volume create <volume name>

docker volume ls // lists all volumes in the s/m

//mounting a volume to the container//

docker run -it --mount source=<name-of-volume>,target=<path-to-directory> -d <image-name>

------docker compose------

docker-compose up -d // to run docker compose

------creating docker swarm cluster------

docker swarm init --advertise-addr=<ip address of the leader/master machine>

//to add slave/worker machine to docker//
sudo docker swarm join --token <token id generated by master machine>

sudo docker swarm leave // to leave the cluster 

//creating services on swarm//

sudo docker service create --name apache --replica 4 <image-name>

//to sclae the docker services -- replicas//

docker service scale <name>=<no of scales>


